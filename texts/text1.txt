¬øQu√© Son Los comandos Linux?
Los comandos de Linux te permiten controlar tu sistema desde la interfaz de l√≠nea de comandos (CLI) en lugar de utilizar tu rat√≥n o trackpad. Son instrucciones de texto introducidas en el terminal para indicarle a tu sistema exactamente qu√© hacer.

Los comandos que ingreses en el terminal de Linux distinguen entre may√∫sculas y min√∫sculas y siguen una sintaxis como ‚Äúcomando -opciones argumentos‚Äú. Puedes combinarlos para tareas complejas mediante pipelines y redirecciones.

Algunas cosas clave para saber sobre los comandos de Linux:

Son sensibles a may√∫sculas y min√∫sculas; por ejemplo, ‚Äúls‚Äù y ‚ÄúLS‚Äù significan cosas diferentes.
Siguen una sintaxis espec√≠fica como ‚Äúcomando -opciones argumentos‚Äú.
Se pueden combinar para realizar operaciones complejas mediante pipelines y redirecciones.
Te proporcionan un control detallado sobre tu sistema, algo dif√≠cil de lograr con interfaces gr√°ficas.
Te permiten automatizar tareas mediante scripts de shell y procesamiento por lotes.
Se pueden utilizar para acceder a recursos del sistema como el sistema de archivos, red, memoria y CPU.
Forman la base de la interacci√≥n con servidores y sistemas operativos Linux.

---------------------------------------------------------------------------------------------------------------------------
1. ls ‚Äì Listar Contenidos de Directorio

Algunas de las opciones m√°s √∫tiles de ls incluyen:
-l ‚Äì Muestra los resultados en formato largo, mostrando detalles adicionales como permisos, propiedad, tama√±o y fecha de modificaci√≥n para cada archivo y directorio.
-a ‚Äì Muestra archivos y directorios ocultos que comienzan con . adem√°s de los elementos no ocultos.
-R ‚Äì Lista de forma recursiva todo el contenido de los subdirectorios, descendiendo indefinidamente en carpetas secundarias.
-S ‚Äì Ordena los resultados por tama√±o de archivo, comenzando por el m√°s grande.
-t ‚Äì Ordena por marca de tiempo, el m√°s reciente primero.

---------------------------------------------------------------------------------------------------------------------------

2. cd ‚Äì Cambiar de Directorio
El comando cd se utiliza para navegar entre directorios. Te permite moverte desde el directorio de trabajo actual a una nueva ubicaci√≥n en el sistema de archivos.

Cuando ejecutas el comando cd por s√≠ mismo, te llevar√° al directorio de inicio. Tambi√©n puedes pasar una ruta espec√≠fica para cambiar a ella. Por ejemplo:

cd /usr/local ‚Äì Cambia al directorio /usr/local 
cd .. ‚Äì Te mueve un nivel atr√°s hacia el directorio principal 
cd ~/pictures ‚Äì Cambia a la carpeta pictures en tu directorio de inicio

---------------------------------------------------------------------------------------------------------------------------
3. mkdir ‚Äì Crear un Nuevo Directorio
El comando mkdir te permite crear una nueva carpeta. Simplemente, espec√≠ficas el nombre del directorio a crear.

Sintaxis:

mkdir [opci√≥n] <directorio>

Esto crear√° un directorio llamado por ejemplo ‚Äúnuevoproyecto‚Äù en el directorio de trabajo actual.

Algunas opciones √∫tiles de mkdir:

-p ‚Äì Crea directorios principales de forma recursiva seg√∫n sea necesario.
-v ‚Äì Muestra un resultado detallado que indica los directorios creados.
Ejemplo:

mkdir -v ~/project/code
---------------------------------------------------------------------------------------------------------------------------
4. rmdir ‚Äì Eliminar Directorio
Para eliminar un directorio vac√≠o, utiliza el comando rmdir. Ten en cuenta que rmdir solo puede eliminar directorios vac√≠os, y necesitaremos el comando rm para eliminar los que tengan alg√∫n contenido.

Sintaxis:

rmdir [opciones] <directorio>

Algunas opciones para rmdir incluyen:

-v ‚Äì Muestra un resultado detallada al eliminar directorios.
-p ‚Äì Elimina directorios principales de forma recursiva seg√∫n sea necesario.
Ejemplo:

rmdir -v ~/project/code
---------------------------------------------------------------------------------------------------------------------------
5. touch ‚Äì Crear Un Nuevo Archivo Vac√≠o

El comando touch se utiliza para crear instant√°neamente un nuevo archivo vac√≠o. Esto es √∫til cuando necesitas un archivo vac√≠o para llenarlo con datos m√°s tarde.

La sintaxis b√°sica de touch es:

touch [opciones] /nombredearchivo

Algunas opciones √∫tiles para touch incluyen:

-c ‚Äì No crea el archivo si ya existe. Evita sobrescribir archivos existentes accidentalmente.
-m ‚Äì En lugar de crear un nuevo archivo, actualiza la marca de tiempo en un archivo existente. Esto se puede usar para cambiar la hora de modificaci√≥n
Por Ejemplo:

touch /home/user/nuevoarchivo.txt
---------------------------------------------------------------------------------------------------------------------------
6. cp ‚Äì Copiar Archivos y Directorios
El comando cp copia archivos o directorios de una ubicaci√≥n a otra. Requiere pasar una ruta de origen y un destino.

La sintaxis b√°sica de cp es:

cp [opciones] /origen/ /destino/

Algunas opciones √∫tiles de cp:

-r ‚Äì Copia directorios de forma recursiva, descendiendo a subdirectorios para copiar su contenido tambi√©n. 
-i ‚Äì Solicita confirmaci√≥n antes de sobrescribir archivos existentes en el destino. Evita sobrescribir datos accidentalmente.
-v ‚Äì Muestra un resultado detallado que indica los detalles de cada archivo mientras se copia. √ötil para confirmar exactamente lo que se copi√≥.
Por Ejemplo:

cp -r /home/user/documents /backups/

Esto copiar√≠a de forma recursiva el directorio /home/user/documents y todo su contenido al directorio /backups/. La opci√≥n -r es necesaria para copiar directorios.
---------------------------------------------------------------------------------------------------------------------------
7. mv ‚Äì Mover o Renombrar Archivos y Directorios
El comando mv se utiliza para mover archivos o directorios a una ubicaci√≥n diferente o renombrarlos. A diferencia del comando anterior, los archivos de la ruta de origen se eliminan despu√©s de haber sido movidos al destino.

Tambi√©n puedes usar el comando mv para renombrar archivos, ya que solo necesitas cambiar las rutas de origen y destino al antiguo y nuevo nombre.

La sintaxis de mv es:

mv [opciones] /origen/ /destino/

Opciones √∫tiles de mv:

-i ‚Äì Solicitar antes de sobrescribir archivos existentes en la ubicaci√≥n de destino. Esto evita sobrescribir datos accidentalmente.
-v ‚Äì Producir un resultado detallado que muestre cada archivo o directorio a medida que se mueve. √ötil para confirmar exactamente lo que se movi√≥.
Por Ejemplo:

mv ~/folder1 /tmp/folder1

Esto mover√° folder1 desde el directorio de inicio (~) al directorio /tmp/. Echemos un vistazo a otro ejemplo de c√≥mo usar el comando mv para renombrar archivos.

mv folder1 folder2

Aqu√≠, ‚Äúfolder1‚Äù es renombrado a ‚Äúfolder2.‚Äù 
---------------------------------------------------------------------------------------------------------------------------
8. rm ‚Äì Eliminar Archivos y Directorios
El comando rm elimina archivos y directorios. √ösalo con precauci√≥n porque los archivos y directorios eliminados no se pueden recuperar.

La Sintaxis es:

rm [opciones] /nombre/

Opciones √∫tiles de rm:

-r ‚Äì Elimina directorios de forma recursiva, incluyendo todos los contenidos dentro de ellos. Necesario al eliminar directorios.
-f ‚Äì Forzar la eliminaci√≥n y suprimir todas las solicitudes de confirmaci√≥n. ¬°Peligroso sin posibilidad de recuperaci√≥n!
-i ‚Äì Solicitar confirmaci√≥n antes de eliminar cada archivo o directorio. Proporciona seguridad contra borrado accidental. 
Por Ejemplo:

rm -rf temp

Esto eliminar√° de forma recursiva el directorio ‚Äútemp‚Äù y todos sus contenidos sin solicitar confirmaciones (-f anula las confirmaciones).

Nota: El comando rm borra permanentemente archivos y carpetas, as√≠ que √∫salo con extrema precauci√≥n. Si se usa con privilegios de sudo, tambi√©n podr√≠as eliminar por completo el directorio ra√≠z y Linux dejar√° de funcionar despu√©s de reiniciar tu computadora.
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
üß† Sintaxis b√°sica de find:

find [ruta] [condiciones] [acciones]

‚úÖ Ejemplos comunes
1. üîç Buscar todos los archivos en un directorio

find .

Busca todo (archivos y carpetas) desde el directorio actual (.) hacia abajo.

2. üìÅ Buscar por nombre de archivo

find . -name archivo.txt

Busca archivo.txt en el directorio actual y subdirectorios.

üîÅ Para que ignore may√∫sculas/min√∫sculas:

find . -iname archivo.txt

3. üìÑ Buscar todos los archivos con una extensi√≥n espec√≠fica

find . -name "*.js"

Encuentra todos los archivos .js (JavaScript).

4. üß± Buscar solo directorios

find . -type d -name "mi_carpeta"

5. üìÇ Buscar solo archivos

find . -type f -name "*.txt"

6. üìÖ Buscar archivos por fecha de modificaci√≥n

find . -mtime -1

Archivos modificados en las √∫ltimas 24 horas.

-mtime -N ‚Üí modificados hace menos de N d√≠as

-mtime +N ‚Üí modificados hace m√°s de N d√≠as

7. üìè Buscar archivos por tama√±o

find . -size +10M
Archivos con m√°s de 10 megabytes.

Ejemplo:


find . -size +1G
Archivos con m√°s de 1 GB.

8. üîß Ejecutar una acci√≥n sobre los archivos encontrados

find . -name "*.log" -exec rm {} \;

Encuentra todos los .log y los elimina.

-exec ‚Üí ejecuta un comando para cada archivo encontrado.
{} ‚Üí se reemplaza por el nombre del archivo encontrado.
\; ‚Üí finaliza el comando -exec.

9. ü™Ñ Buscar archivos vac√≠os

find . -type f -empty

üß™ Pr√°ctica avanzada
üîÅ Buscar y mover archivos:

find . -name "*.png" -exec mv {} /ruta/destino/ \;

üîÅ Buscar y copiar:

find . -name "*.csv" -exec cp {} /ruta/destino/ \;

üìù Consejito
Si tienes problemas con espacios en los nombres de archivos, puedes usar find junto con xargs o -print0 y -0:

find . -name "*.mp3" -print0 | xargs -0 rm
---------------------------------------------------------------------------------------------------------------------------
